logging:
  level:
    root: WARN
    ex:
      rr: INFO

server:
  port: 8080
  shutdown: graceful

spring:
  main:
    allow-bean-definition-overriding: true
  jpa:
    hibernate:
      ddl-auto: none
  #  rabbitmq:
  #    host: localhost
  #    port: 5672
  #    user: guest
  #    password: guest
  #    listener:
  #      simple:
  #        default-requeue-rejected: false


  datasource:
    local:
      jdbcUrl: jdbc:h2:mem:localDb
      username: ${DB_USER}
      password: ${DB_PASSWORD}
      platform: h2
      initialization-mode: always
      driverClassName: org.h2.Driver
    dev:
      jdbcUrl: jdbc:h2:mem:devDb;INIT=RUNSCRIPT FROM 'classpath:schema.sql';
      username: ${DB_USER}
      password: ${DB_PASSWORD}
      platform: h2
      initialization-mode: always
      driverClassName: org.h2.Driver
    sit:
      jdbcUrl: jdbc:h2:mem:sitDb;INIT=RUNSCRIPT FROM 'classpath:schema.sql';
      username: ${DB_USER}
      password: ${DB_PASSWORD}
      platform: h2
      initialization-mode: always
      driverClassName: org.h2.Driver
    sat:
      jdbcUrl: jdbc:h2:mem:satDb;INIT=RUNSCRIPT FROM 'classpath:schema.sql';
      username: ${DB_USER}
      password: ${DB_PASSWORD}
      platform: h2
      initialization-mode: always
      driverClassName: org.h2.Driver
    prod:
      jdbcUrl: jdbc:h2:mem:prodDb;INIT=RUNSCRIPT FROM 'classpath:schema.sql'\;RUNSCRIPT FROM 'classpath:data.sql';
      username: ${DB_USER}
      password: ${DB_PASSWORD}
      platform: h2
      initialization-mode: always
      driverClassName: org.h2.Driver

vaadin:
  whitelisted-packages: com.vaadin,org.vaadin,com.example.vaadin

app:
  secret:
    salt: ${SALT}